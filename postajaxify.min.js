/**
 * postajaxify v1.0.0
 * 
 * A jQuery plugin to AJAXify WordPress post queries with filters.
 * 
 * @version 1.0.0
 * @link https://github.com/vishalpadhariya/postajaxify
 * @license MIT
 * 
 * @param {string} ajaxurl The URL to use for AJAX calls.
 * @param {string} action The AJAX action to trigger.
 * @param {string} type The event type to trigger the AJAX call ('onChange' or 'onSubmit').
 * @param {object} callbacks Callback functions to trigger at different stages of the AJAX call.
 * @returns {object} The jQuery object for chaining.
 * 
 * @example
 * // Initialize the plugin on a form element with onChange event type and default callbacks only for beforeSend and afterSend events.
 * $('#filters-form').postajaxify(ajaxurl, 'filter_posts', 'onChange', {
 *    beforeSend: function () {
 *      console.log('Before sending AJAX request...');
 *   },
 *  afterSend: function () {
 *      console.log('After sending AJAX request...');
 *  },
 *  onSuccess: function (response) {
 *      console.log('AJAX request successful:', response);
 *  },
 *  onError: function (xhr, status, error) {
 *      console.error('AJAX request error:', error);
 *  }
 * });
 * 
 * @example
 * // Initialize the plugin on a form element with onSubmit event type and custom callbacks only for beforeSend and onSuccess events 
 * $('#filters-form').postajaxify(ajaxurl, 'filter_posts', 'onSubmit', {
 *    beforeSend: function () {
 *      console.log('Before sending AJAX request...');
 *   },
 *  afterSend: function () {
 *      console.log('After sending AJAX request...');
 *  },
 *  onSuccess: function (response) {
 *      console.log('AJAX request successful:', response);
 *  },
 *  onError: function (xhr, status, error) {
 *      console.error('AJAX request error:', error);
 *  }
 * });
 * 
 */ !function(t){t.fn.postajaxify=function(e,r,a,i){return this.each(function(){var n=t(this);if(!n.is("form")){console.error("postajaxify must be initialized on a form element.");return}var o={},f={},u={},l={};function d(){o={},f={},u={},l={},n.find("[data-taxfilter], [data-metafilter], [data-textfilter], [data-datefilter]").each(function(){var e,r=t(this);if(r.is(":checkbox, :radio")){if(!r.is(":checked"))return;e=r.val()}else e=r.is('input[type="text"], input[type="date"], input[type="datetime-local"]')?r.val().trim():r.val();if(e){if(r.attr("data-taxfilter")){var a=r.attr("data-taxfilter");o[a]||(o[a]=[]);var i=r.attr("multiple");void 0!==i?o[a].push(e):o[a]=e}if(r.attr("data-metafilter")){var n=r.attr("data-metafilter");f[n]||(f[n]=[]);var i=r.attr("multiple");void 0!==i?f[n].push(e):f[n]=e}if(r.attr("data-textfilter")&&(u[r.attr("data-textfilter")]=e),r.attr("data-datefilter")){var d=r.attr("data-datefilter"),c=e;l[d]||(l[d]=""),l[d]=c}}});var a={action:r,taxonomyFilters:o,metaFilters:f,textFilters:u,dateFilters:l};return i&&"function"==typeof i.beforeSend&&i.beforeSend(a),t.ajax({url:e,method:"POST",data:a,beforeSend:function(){i&&"function"==typeof i.beforeSend&&i.beforeSend()},complete:function(){i&&"function"==typeof i.afterSend&&i.afterSend()}}).then(function(t){return i&&"function"==typeof i.onSuccess&&i.onSuccess(t),console.log("Ajax response retrieved."),t},function(e,r,a){return i&&"function"==typeof i.onError&&i.onError(e,r,a),console.error("AJAX error:",a),t.Deferred().reject({status:r,error:a})})}"onChange"===a&&n.on("change","select, input[type=checkbox], input[type=radio], input[type=text], input[type=date], input[type=datetime-local]",function(){d().then(function(t){console.log("Filters successfully updated.")},function(t){console.error("Error updating filters:",t)})}),"onSubmit"===a&&n.on("submit",function(t){t.preventDefault(),d().then(function(t){console.log("Filters successfully updated.")},function(t){console.error("Error updating filters:",t)})})}),this}}(jQuery);